#!/bin/sh

INPUT=""
OUTPUT="gpt_context.txt"
IGNORED=""

show_help() {
    echo "Usage: $0 [--help] [--version] [--input PATH] [--output OUTPUT]"
    echo
    echo "  Defaults input and output to the current directory if not provided."
    echo "  --help         Show this help message"
    echo "  --version      Show version information"
    echo "  --input  PATH  Git repository path"
    echo "  --output OUTPUT The path for the output (defaults to gpt_context.txt)"
}

show_version() {
    echo "v1.0"
}

process_arguments() {
    if [ -z "$INPUT" ]; then
        INPUT="./"
    fi
    while [ $# -gt 0 ]; do
        case $1 in
        --help)
            show_help
            exit 0
            ;;
        --version)
            show_version
            exit 0
            ;;
        --input)
            if [ -n "$2" ]; then
                INPUT=$2
                shift
            else
                echo "Error: --input requires an argument."
                exit 1
            fi
            ;;
        --output)
            if [ -n "$2" ]; then
                OUTPUT="$(pwd)/$2"
                shift
            else
                echo "Error: --output requires an argument."
                exit 1
            fi
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
        esac
        shift
    done
}

generate_ignored_directories() {
    if [ "${OUTPUT#*/}" != "$OUTPUT" ]; then
        IGNORED="-wholename $OUTPUT"
    else
        IGNORED="-name $OUTPUT"
    fi

    IGNORED="$IGNORED -o -name .git -o -name yarn.lock -o -name package-lock.json -o -path ${OUTPUT}"

    while IFS= read -r line; do
        trimmed_line=$(echo "$line" | sed 's/^[ \t]*//;s/[ \t]*$//;s/[\/]*$//')

        if [ -n "$trimmed_line" ] && [ "${trimmed_line#\#}" = "$trimmed_line" ]; then
            # if string starts with slash, it's a path and we can ignore by name
            if [ "${trimmed_line#/}" != "$trimmed_line" ]; then
                IGNORED="$IGNORED -o -name ${trimmed_line#/}"
            # else if it contains a slash it's a path or partial path, so ignore it by wholename
            elif [ "${trimmed_line#*/}" != "$trimmed_line" ]; then
                IGNORED="$IGNORED -o -path ${trimmed_line}"
            else
                IGNORED="$IGNORED -o -name ${trimmed_line}"
            fi
        fi
    done <"$INPUT/.gitignore"
}

generate_directory_structure() {
    echo "  <FILE_STRUCTURE>" >>"$OUTPUT"
    find "$INPUT" \( $IGNORED \) -prune -o -type f -print | while read -r PATH; do
        echo "    <FILE path=\"$PATH\"></FILE>" >>"$OUTPUT"
    done
    echo "  </FILE_STRUCTURE>" >>"$OUTPUT"
}

generate_file_content_nodes() {
    echo "  <FILES>" >>"$OUTPUT"
    find "$INPUT" \( $IGNORED \) -prune -o -type f -print | while read -r FILE_PATH; do
        if [ "$(file -i "$FILE_PATH" | awk -F'charset=' '{print $2}')" != "binary" ]; then
            echo "    <FILE path=\"$FILE_PATH\">" >>"$OUTPUT"
            sed -e 's/^/    /' "$FILE_PATH" >>"$OUTPUT"
            echo "    </FILE>" >>"$OUTPUT"
        fi
    done
    echo "  </FILES>" >>"$OUTPUT"
}

check_if_git_repository() {
    if [ ! -d "$INPUT/.git" ]; then
        echo "$INPUT is not a git repository."
        exit 1
    fi
    REPOSITORY=$(basename $(git --git-dir=$INPUT/.git remote get-url origin))
}

process_arguments "$@"

check_if_git_repository

echo "Generating GPT Context for GIT repository: $INPUT"

>"$OUTPUT"

echo "<REPOSITORY name=\"${REPOSITORY}\">" >>"$OUTPUT"
generate_ignored_directories
generate_directory_structure
generate_file_content_nodes

echo "</REPOSITORY>" >>"$OUTPUT"

echo "GPT Context saved to: $OUTPUT"
